import"../chunks/DsnmJJEf.js";import{p as V,c as W,f as m,a as x,s as e,b as s,d as u,x as o,y as v,r as _,u as z,t as q}from"../chunks/CI84g2d-.js";import{s as B}from"../chunks/yXy5N-Y0.js";import{e as L}from"../chunks/UWjWgUKU.js";import{C as y}from"../chunks/Dpm7zMkA.js";import{T as D}from"../chunks/6m4WPhWI.js";import{g as J}from"../chunks/D1R_tL2z.js";import{T as M,a as P}from"../chunks/BOk2d73r.js";import{T as K}from"../chunks/BADKIEz9.js";import{U as R}from"../chunks/GLYnpegp.js";import{M as w}from"../chunks/B6c4a4hd.js";var Q=m("Maybe <code>moss.css</code> should default to <code>moss_utilities.css</code> or <code>moss_utility_classes.css</code>? idk",1),X=m(`<!> <p>Moss has three CSS files, two of which are required:</p> <!> <p>The <code>moss.css</code> file is created on demand with the utility classes that your code
			uses, if any. For now it requires <a href="https://github.com/ryanatkn/gro">Gro</a> to
			generate it, but it isn't hard to make your own integration using the helpers <!>. I can add a Vite plugin if
			there's demand.</p> <!>`,1),Z=m('<li class="overflow_wrap_break_word svelte-c00vz6"> </li>'),ee=m('<h4> </h4> <ul class="unstyled"></ul>',1),te=m(`<!> <p>Moss supports utility classes that cost nothing until you opt-in. The main stylesheet and
			theme are required and build around CSS custom properties - utility classes offer an
			orthogonal API that some developers prefer some of the time. They leverage Moss's base
			frameworky parts, and are well-integrated with the other APIs and tools.</p> <p>Moss exports <!> to generate styles
			on demand based on class usage in your source files, so you can ship the minimal code needed. Some
			values are interpreted to efficiently support large value ranges, e.g. <code>opacity_0</code> through <code>opacity_100</code> and <code>font_weight_1</code> to <code>font_weight_1000</code>.</p> <aside>The API has been drifting to be more consistently match CSS at the cost of verbosity. I think
			I like this direction but is <code>margin_x_xl</code> absurd? I don't think supporting both versions
			by default is good but the APIs should make this easy to customize.</aside> <aside>⚠️ Moss does not fully support <a href="https://svelte.dev/docs/svelte/class#Attributes-Objects-and-arrays">Svelte's object+array class syntax</a>, added in 5.16. For now see <!> for the supported forms.
			The current strategy uses a regexp for TS and Svelte files, but we'll probably need to more robustly
			scan the parsed AST.</aside> <p><code>$globals</code> include <code>inherit|initial|revert|revert_layer|unset</code>.</p> <div class="utility_classes svelte-c00vz6"></div>`,1),se=m(`<!> <p>Moss's <!> provides styles for the base HTML elements using the framework's <!>, acting as a modern CSS reset with sensible defaults and integrated theming. It includes
			Moss-specific CSS classes - not utility classes in the strict sense - that provide common
			generic functionality.</p> <h4><code>.unstyled</code></h4> <!> <ul class="unstyled mb_lg"><li>a</li> <li>b</li></ul> <!> <ul><li>1</li> <li>2</li></ul> <p>The <code>.unstyled</code> class lets Moss provide solid default element styles with a simple and
			generic opt-out:</p> <!> <p>Respecting <code>.unstyled</code> isn't a straightforward choice in all cases. Help is
			appreciated to refine the internals. For example, should <code>input</code> respect it? Maybe?
			All styles or a subset?</p> <aside><p class="row"></p> <!> <p>Moss uses this pattern in some places, and maybe more in the future. One nice aspect is that <code>--list_padding_left</code> need not exist anywhere else but this declaration and maybe
				your code, and in practice it's backwards compatible.</p> <aside>Note the <code>:where()</code> is used for Moss's default styles, so its specificity is as low
				as possible to minimize interference with your styles.</aside></aside>`,1),oe=m("<!> <!> <!> <!>",1);function be(E,F){V(F,!0);const N=J("classes"),H=[{group:"Position and display",items:["position_static|relative|absolute|fixed|sticky|$globals","display_none|contents|block|flow_root|inline|inline_block|run_in|list_item|inline_list_item|flex|inline_flex|grid|inline_grid|ruby|block_ruby|table|inline_table|$globals","visibility_visible|hidden|collapse|$globals","float_left|right|none|inline_start|inline_end|$globals","opacity_0-100","overflow_auto|hidden|scroll|clip|visible","overflow_x|y_auto|hidden|scroll|clip|visible","overflow_wrap_normal|anywhere|break_word|$globals","scrollbar_width_auto|thin|none|$globals","scrollbar_gutter_auto|stable|stable_both_edges|$globals"]},{group:"Flexbox and grid",items:["flex_1","flex_wrap_wrap|wrap_reverse|nowrap|$globals","flex_direction_row|column|row_reverse|column_reverse|$globals","flex_grow|shrink_1|0","align_items_center|start|end|baseline|stretch","align_content_center|start|end|baseline|space_between|space_around|space_evenly|stretch","align_self_center|start|end|baseline|stretch","justify_content_center|start|end|left|right|space_between|space_around|space_evenly|stretch","justify_items_center|start|end|left|right|baseline|stretch","justify_self_center|start|end|left|right|baseline|stretch"]},{group:"Sizing and spacing",items:["width|height_0|100|1px-3px|auto|max_content|min_content|fit_content|stretch","width|height_xs5-xl15","top|bottom|left|right_0|100|1px-3px|auto","top|bottom|left|right_xs5-xl15","inset_0|1px-3px|xs5-xl15","p|pt|pr|pb|pl|px|py_xs5-xl15","p|pt|pr|pb|pl|px|py_0|1px-3px","pt|pr|pb|pl_100","m|mt|mr|mb|ml|mx|my_xs5-xl15","m|mt|mr|mb|ml|mx|my_0|1px-3px|auto","mt|mr|mb|ml_100","gap_xs5-xl15","column|row_gap_xs5-xl15","width_upto_xs-xl","width_atleast_xs-xl","height_upto_xs-xl","height_atleast_xs-xl"]},{group:"Typography",items:["font_family_sans|serif|mono","line_height_xs-xl|0|1","font_size_xs-xl9","icon_size_xs-xl3","text_align_start|end|left|right|center|justify|justify_all|match_parent","vertical_align_baseline|sub|super|text_top|text_bottom|middle|top|bottom","word_break_normal|break_all|keep_all|$globals","white_space_normal|nowrap|pre|pre_wrap|pre_line|break_spaces","white_space_collapse_collapse|preserve|preserve_breaks|preserve_spaces|break_spaces|$globals","text_wrap_wrap|nowrap|balance|pretty|stable","user_select_none|auto|text|all|$globals","font_weight_100-900","ellipsis"]},{group:"Colors",items:["text_color_0-10","darken|lighten_1-9","bg|fg","bg|fg_1-9","color_darken|lighten_1-9","color_bg|fg","color_bg|fg_1-9","hue_a-j","color_a-j_1-9","bg_a-j_1-9"]},{group:"Borders and outlines",items:["border_color_1-5","border_color_a-j","border_color_transparent","border_width_0-9","outline_width_0|focused|active","border_style_none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset|$globals","border_radius_xs3-xl","border_radius_0-100","border_top|bottom_left|right_radius_xs3-xl","border_top|bottom_left|right_radius_0-100"]},{group:"Shadows",items:["shadow_xs-xl","shadow_top|bottom_xs-xl","shadow_inset_xs-xl","shadow_inset_top|bottom_xs-xl","shadow_color_highlight|glow|shroud","shadow_color_a-j","shadow_alpha_1-5","shadow_inherit|none"]},{group:"Transforms and visual effects",items:["flip_x|y|xy","pixelated"]},{group:"Composite classes",items:["box","column","row","formatted","selected","selectable","clickable","pane","panel","icon_button","plain","menu_item","chevron","chip"]}];D(E,{get tome(){return N},children:(O,ae)=>{var I=oe(),j=x(I);R(j,{children:(p,$)=>{o();var a=v("Both the docs and implementation of these need a lot more work.");s(p,a)}});var A=e(j,2);M(A,{children:(p,$)=>{var a=X(),d=x(a);P(d,{text:"Optional CSS classes"});var l=e(d,4);y(l,{content:`<!-- +layout.svelte -->
<script>
	import '@ryanatkn/moss/style.css'; // required
	import '@ryanatkn/moss/theme.css'; // required, can bring your own
	import '$routes/moss.css'; // optional, generated by \`gen_moss_css\`
	// ...
<\/script>`});var c=e(l,2),h=e(u(c),5);w(h,{path:"gen_moss_css.ts",children:(i,t)=>{o();var r=v("gen_moss_css.ts");s(i,r)},$$slots:{default:!0}}),o(),_(c);var g=e(c,2);R(g,{children:(i,t)=>{o();var r=Q();o(6),s(i,r)}}),s(p,a)},$$slots:{default:!0}});var C=e(A,2);M(C,{children:(p,$)=>{var a=te(),d=x(a);P(d,{text:"Utility classes"});var l=e(d,4),c=e(u(l));w(c,{path:"css_class_helpers.ts",children:(t,r)=>{o();var n=v("helpers");s(t,n)},$$slots:{default:!0}}),o(9),_(l);var h=e(l,4),g=e(u(h),3);w(g,{path:"css_class_helpers.test.ts",children:(t,r)=>{o();var n=v("the tests");s(t,n)},$$slots:{default:!0}}),o(),_(h);var i=e(h,4);L(i,21,()=>H,t=>t.group,(t,r)=>{var n=ee(),b=x(n),k=u(b,!0);_(b);var S=e(b,2);L(S,20,()=>z(r).items,f=>f,(f,Y)=>{var T=Z(),G=u(T);_(T),q(()=>B(G,`.${Y??""}`)),s(f,T)}),_(S),q(()=>B(k,z(r).group)),s(t,n)}),_(i),s(p,a)},$$slots:{default:!0}});var U=e(C,2);M(U,{children:(p,$)=>{var a=se(),d=x(a);P(d,{text:"Builtin classes"});var l=e(d,2),c=e(u(l));w(c,{path:"style.css",children:(k,S)=>{o();var f=v("main stylesheet");s(k,f)},$$slots:{default:!0}});var h=e(c,2);K(h,{name:"variables"}),o(),_(l);var g=e(l,4);y(g,{content:`<ul>
	<li>1</li>
	<li>2</li>
</ul>`});var i=e(g,4);y(i,{content:`<ul class="unstyled">
	<li>a</li>
	<li>b</li>
</ul>`});var t=e(i,6);y(t,{lang:"css",content:`:where(:is(ul, ol, menu):not(.unstyled)) {
	padding-left: var(--space_xl4);
}`});var r=e(t,4),n=u(r);n.textContent="⌆ Note this strategy supports semantic hooks for theming. A hypothetical change:";var b=e(n,2);y(b,{lang:"css",content:`:where(:is(ul, ol, menu):not(.unstyled)) {
	padding-left: var(--list_padding_left, var(--space_xl4));
}`}),o(4),_(r),s(p,a)},$$slots:{default:!0}}),s(O,I)},$$slots:{default:!0}}),W()}export{be as component};
