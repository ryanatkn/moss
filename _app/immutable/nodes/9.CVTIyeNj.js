import{t as k,a as g,b as J}from"../chunks/NVWS3V4U.js";import{p as D,c,s as t,j as i,u as E,r as n,t as Q,a as G,f as A,n as _}from"../chunks/xlH9aj8z.js";import{f as Y,e as F,i as q}from"../chunks/Cpuy4IUX.js";import{T as ee}from"../chunks/CXBvezSF.js";import{g as te}from"../chunks/DixYjCJE.js";import{T as j}from"../chunks/TmVHbwVA.js";import{M as W}from"../chunks/g0yro4gb.js";import{C as ae}from"../chunks/DP5MUWXf.js";import{T as z,a as V}from"../chunks/Cic_LfYV.js";import{s as R}from"../chunks/iZ3s1Mxj.js";import{p as K}from"../chunks/CbDHXh45.js";import{S as X}from"../chunks/BwPCPRFF.js";import{t as oe}from"../chunks/Bg4QiIsH.js";import{U as re}from"../chunks/Drn4c8mW.js";import{c as O}from"../chunks/BlUCfhnp.js";var se=k('<li class="svelte-5ilk6l"><div class="color svelte-5ilk6l"></div> <div class="text svelte-5ilk6l"><!> <div class="hue svelte-5ilk6l"> </div> <small class="description svelte-5ilk6l"> </small></div></li>');function ne(a,e){D(e,!0);const o=K(e,"width",3,48),r=K(e,"height",3,48),u=s=>{var l;return(l=e.computed_styles)==null?void 0:l.getPropertyValue("--"+s)},d=E(()=>`hue_${e.color_name}`),m=E(()=>Number(u(i(d))));var h=se();let S;var $=c(h);let C;var y=t($,2),M=c(y);X(M,{get name(){return i(d)}});var f=t(M,2),L=c(f,!0);n(f);var v=t(f,2),T=c(v,!0);n(v),n(y),n(h),Q(()=>{S=Y(h,"",S,{"--hue":`var(--${i(d)??""})`}),C=Y($,"",C,{width:`${o()??""}px`,height:`${r()??""}px`}),R(L,i(m)),R(T,e.description)}),g(a,h),G()}const le=(a,e,o)=>"#"+U(a)+U(e)+U(o),U=a=>{var e=a.toString(16);return e.length===1?"0"+e:e},Z=(a,e,o)=>{var r,u,d;if(e===0)r=u=d=o;else{var m=o<.5?o*(1+e):o+e-o*e,h=2*o-m;r=B(h,m,a+1/3),u=B(h,m,a),d=B(h,m,a-1/3)}return[Math.round(r*255),Math.round(u*255),Math.round(d*255)]},B=(a,e,o)=>{var r=o<0?o+1:o>1?o-1:o;return r<1/6?a+(e-a)*6*r:r<1/2?e:r<2/3?a+(e-a)*(2/3-r)*6:a},ie=(a,e,o)=>{var r=Z(a,e,o);return le(r[0],r[1],r[2])},de=/^(hsl\()?\s*(\d+),?\s*(\d+)%,?\s*(\d+)%/,ce=a=>{var e=de.exec(a);if(!e)throw new Error("invalid HSL string");return[Number(e[2])/360,Number(e[3])/100,Number(e[4])/100]};var he=k('<li class="svelte-118ha03"><div class="color svelte-118ha03"></div> <div class="text svelte-118ha03"><!> <div class="hex svelte-118ha03"> </div> <div class="hsl svelte-118ha03"> </div> <div class="rgb svelte-118ha03"> </div></div></li>');function ue(a,e){D(e,!0);const o=oe.get(),r=E(()=>e.index+1),u=E(()=>`color_${e.color_name}_${i(r)}`),d=E(()=>{var s;return o.color_scheme,(s=e.computed_styles)==null?void 0:s.getPropertyValue("--"+i(u))}),m=E(()=>i(d)&&ce(i(d)));var h=he();let S;var $=t(c(h),2),C=c($);X(C,{get name(){return i(u)}});var y=t(C,2),M=c(y,!0);n(y);var f=t(y,2),L=c(f,!0);n(f);var v=t(f,2),T=c(v);n(v),n($),n(h),Q((s,l)=>{S=Y(h,"",S,{"--bg_color":`var(--${i(u)??""})`}),R(M,s),R(L,i(d)),R(T,`rgb(${l??""})`)},[()=>i(m)&&ie(...i(m)),()=>i(m)&&Z(...i(m)).join(" ")]),g(a,h),G()}var me=k('<ul class="unstyled svelte-6817yd"></ul>');function ve(a,e){var o=me();F(o,20,()=>({length:9}),q,(r,u,d)=>{ue(r,{index:d,get color_name(){return e.color_name},get computed_styles(){return e.computed_styles}})}),n(o),g(a,o)}var pe=k(`<!> <p>Moss provides a palette of color and hue <!> designed to support concise
			authoring in light and dark modes, as well as straightforward <!> by both developers and end-users at runtime. The colors have more semantics than just plain values,
			so they automatically adapt to dark mode and custom themes, at the cost of having different values
			depending on color scheme and theme.</p> <h4>Adapting colors to dark mode</h4> <p>A color's subjective appearance depends on the context in which it's viewed, especially the
			surrounding colors and values. Moss's semantic colors are designed to work across color
			schemes, so each Moss color <!> has two values, one
			for light and one for dark mode. The exceptions are the lightest (1) and darkest (9) variants,
			although this may change if it yields better results.</p> <h4>Custom themes</h4> <p>Instead of "blue" and "red", colors are named with letters like "a" and "b", so you can change
			the primary "a" from blue to any color in a theme without breaking the name-to-color
			correspondence everywhere. This also flexibly handles more colors and cases than using names
			like "primary", and although it takes some learning, it's a simple pattern to remember.
			("primary" and its ilk require learning too!)</p> <p>A downside of this approach is that changing a color like the primary "a" affects the many
			places it's used. Sometimes you may want to change the color of a specific element or state,
			not all the things. In those cases, use plain CSS and optionally Moss variables. Compared to
			most libraries, Moss provides fewer handles for granular color customizations, but the
			benefits include consistency, efficiency, DRY authoring, and ease of app-wide theming.</p>`,1),_e=k(`<!> <p>For performance reasons, Moss does not currently have an extensive set of variants, like
			specialized states for elements or color values like "blue". Each of the 7 hues has 9 HSL
			color values (e.g. <code>hsl(120 55% 36%)</code>) and 9 HSL values (e.g. <code>120 55% 36%</code>, useful to apply custom alpha), handling most cases, and the base
			colors can be customized with platform APIs like the <!> CSS function.</p> <p>Variants will be expanded when Moss includes a Vite plugin or other build tooling for
			optimization. A downside of removing unused styles is that they won't be available to your
			end-users at runtime. We'll probably end up with an interpreted language like Tailwind's
			just-in-time compiler.</p>`,1),ge=k(`Colors are unfinished. I'm thinking of adding orange and cyan for a total of 9 hues. Moss may
			also change from HSL to <!>.`,1),fe=k(`<!> <!> <p>Hue variables contain a single <!> number. Each color variable combines
			a hue variable with hardcoded saturation and lightness values for light and dark modes.</p> <p>Hue variables therefore provide a single source of truth that's easy to theme, but to achieve
			pleasing results, setting the hue alone is not always sufficient. Custom colors will often
			require you to set per-variable saturation and lightness values.</p> <p>Hue variables are also useful to construct custom colors not covered by the color variables.
			For example, Moss's base stylesheet uses <code>hue_a</code> for the semi-transparent <code>::selection</code>. (try selecting some text - <span class="color_a_5">same hue!</span>)</p> <p>Unlike the color variables, the hue variables are the same in both light and dark modes.</p> <ul class="palette unstyled svelte-5ibhnb"></ul>`,1),be=k(`<!> <p>There are 9 variables per color, numbered 1 to 9, lightest to darkest. The 5th variable of
			each color is used as the base for things like <!>.</p> <p>Note that these values differ between light and dark modes! See the discussion above for why.</p> <p>These colors were eyeballed by a programmer, and will change :]</p> <ul class="palette unstyled pt_xl2 svelte-5ibhnb"></ul>`,1),ye=k('<!> <!> <!> <!> <div class="box w_100 mb_lg"><!></div>',1);function Re(a,e){D(e,!0);const r=te("colors"),u=typeof window>"u"?null:window.getComputedStyle(document.documentElement),d=["primary","success/help","error/danger","secondary","tertiary","quaternary","quinary","senary","septenary"];ee(a,{tome:r,children:(m,h)=>{var S=ye(),$=A(S);z($,{children:(v,T)=>{var s=pe(),l=A(s);V(l,{text:"Color semantics"});var p=t(l,2),b=t(c(p));j(b,{name:"variables"});var H=t(b,2);j(H,{name:"themes",children:(I,P)=>{_();var N=J("theming");g(I,N)},$$slots:{default:!0}}),_(),n(p);var w=t(p,4),x=t(c(w));j(x,{name:"variables",children:(I,P)=>{_();var N=J("variable");g(I,N)},$$slots:{default:!0}}),_(),n(w),_(6),g(v,s)},$$slots:{default:!0}});var C=t($,2);z(C,{children:(v,T)=>{var s=_e(),l=A(s);V(l,{text:"Caveats"});var p=t(l,2),b=t(c(p),5);W(b,{path:"Web/CSS/color_value/color-mix"}),_(),n(p),_(2),g(v,s)},$$slots:{default:!0}});var y=t(C,2);z(y,{children:(v,T)=>{var s=fe(),l=A(s);V(l,{text:"Hue variables"});var p=t(l,2);re(p,{children:(x,I)=>{_();var P=ge(),N=t(A(P));W(N,{path:"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/oklch"}),_(),g(x,P)}});var b=t(p,2),H=t(c(b));W(H,{path:"Web/CSS/hue"}),_(),n(b);var w=t(b,8);F(w,22,()=>O,x=>x,(x,I,P)=>{ne(x,{get color_name(){return I},computed_styles:u,get description(){return d[i(P)]}})}),n(w),g(v,s)},$$slots:{default:!0}});var M=t(y,2);z(M,{children:(v,T)=>{var s=be(),l=A(s);V(l,{text:"Color variables"});var p=t(l,2),b=t(c(p));j(b,{name:"buttons"}),_(),n(p);var H=t(p,6);F(H,20,()=>O,w=>w,(w,x)=>{ve(w,{get color_name(){return x},computed_styles:u})}),n(H),g(v,s)},$$slots:{default:!0}});var f=t(M,2),L=c(f);ae(L,{}),n(f),g(m,S)},$$slots:{default:!0}}),G()}export{Re as component};
