import{t as r,b as Z,a as s,m as ve}from"../chunks/NVWS3V4U.js";import{p as me,a as he,f as I,s as e,c as t,n as h,r as a,j as k,u as E,t as M}from"../chunks/xlH9aj8z.js";import{s as pe}from"../chunks/iZ3s1Mxj.js";import{e as S,i as L,f as R,d as _e}from"../chunks/Cpuy4IUX.js";import{C as ge}from"../chunks/Be10N2ws.js";import{T as ue}from"../chunks/CXBvezSF.js";import{C as fe}from"../chunks/DP5MUWXf.js";import{T as H}from"../chunks/TmVHbwVA.js";import{g as ye}from"../chunks/DixYjCJE.js";import{t as be}from"../chunks/Bg4QiIsH.js";import{T as C,a as A}from"../chunks/Cic_LfYV.js";import{M as ke}from"../chunks/g0yro4gb.js";import{S as N}from"../chunks/BwPCPRFF.js";import{U as ee}from"../chunks/Drn4c8mW.js";var we=r("<code>darken</code> and <code>lighten</code>",1),$e=r('<div><div class="color svelte-tyce3u"></div> <small class="svelte-tyce3u"><!></small></div>'),xe=r('<div><div class="color svelte-tyce3u"></div> <small class="svelte-tyce3u"><!></small></div>'),Ie=r('<!> <!> <div class="swatch svelte-tyce3u"></div> <div class="swatch svelte-tyce3u"></div>',1),Te=r("<code>bg</code> and <code>fg</code>",1),Pe=r('<div><div class="color svelte-tyce3u"></div> <small class="svelte-tyce3u"><!></small></div>'),Me=r('<div><div class="color svelte-tyce3u"></div> <small class="svelte-tyce3u"><!></small></div>'),Se=r(`<!> <p>In light mode, <code>bg</code> is the same as <code>lighten</code> and <code>fg</code> is
				the same as <code>darken</code>. In dark mode, they're swapped.</p> <div class="swatch svelte-tyce3u"></div> <div class="swatch svelte-tyce3u"></div>`,1),Ce=r("<!> <!> <!>",1),Ae=r(`<!> <p>Many styles are designed to stack, so things can appear in different contexts while retaining
			relative color value distinctiveness ("color value" as in darkness-lightness). Internally this
			uses simple transparency instead of complex selectors or other structure.</p> <!> <div class="fg_1 p_sm"><div class="fg_1 p_sm"><div class="fg_1 p_sm"><div class="fg_1 p_sm"><p class="bg p_sm">these shades use opacity, but notice how contrast changes with depth, creating
							limitations</p></div></div></div></div> <p class="mt_lg">This adds some complexity and performance costs, and it's currently incomplete, but so far it
			feels like an elegant solution with many unfinished details, and I plan to continue
			integrating the idea in more places while considering alternative designs. However alpha
			transparency has multiple costs, so I'm trying to be mindful to not use alpha for text and
			other cases that are more performance-sensitive, but we may need to change this behavior for
			the base cases, or include performance themes.</p>`,1),Be=r('<div><div></div> <small class="svelte-tyce3u"> </small></div>'),Ee=r(`<!> <p>These are not variables, they're just utility classes that map to <code>%</code> values.</p> <div class="swatch svelte-tyce3u"></div>`,1),Le=r(`<section><!> <p>Moss is designed around two simplistic models of light, one for dark mode and one for light
			mode, mapping to the web platform's <!>. The goal is easy
			authoring with simple and consistent rules for arbitrary compositions and states. Each <!> can choose to implement either light mode or dark mode or both.</p> <p>Light mode's starting point is plain white documents (like paper) where we can think of UI
			construction as assembling elements that contrast against the white background, replacing some
			of the white blankness with darkened values/color/shape. In other words, we start with full
			lightness and subtract light to make visuals. Black shadows on the white background make
			natural sense, and white glows against a white background are invisible.</p> <p>In contrast, dark mode's starting point is a lightless void where we add light. We add
			elements which emanate light. I think of videogames and virtual/augmented/actual reality.
			Black shadows are invisible against a black background, and white glows make natural sense
			against a black background.</p> <p>This distinction leads to complication. For example, applying a black shadow to an element has
			a particular visual impact on the typical light mode page, but viewed in dark mode, it would
			disappear completely against a black background.</p> <p>Moss provides APIs that simplify or hide this complexity. For example, the <code>lighten</code> and <code>darken</code> variables are the same in light and dark modes, but <code>fg</code> and <code>bg</code> are equivalent values that swap places in dark mode. Thus <code>bg</code> and <code>fg</code> are called color-scheme-aware, and <code>lighten</code> and <code>darken</code> are color-scheme-agnostic. (maybe you can think of better terminology? I
			like the word "adaptive" but idk) The <!> docs elaborate more on this point
			and the <!> docs implement more of the idea.</p> <p>Opacity is used to enable arbitrary stacking that visually inherits its context. Not all cases
			are properly handled yet, and some choices are made for performance reasons, like avoiding
			opacity on text. (assuming this is still a thing?)</p></section> <!> <section><!> <aside class="mt_xl2 width_sm mx_auto"><p>tip: Try <button type="button">toggling</button> between light
				and dark to see how <code>bg</code> and <code>fg</code> change, while <code>darken</code> and <code>lighten</code> don't change but do appear significantly
				different because of the context.</p></aside></section> <!> <!>`,1);function Qe(ae,te){me(te,!0);const se=ye("shading"),O=be.get(),oe=()=>{O.color_scheme=O.color_scheme==="light"?"dark":"light"},ie=["opacity_0","opacity_10","opacity_20","opacity_30","opacity_40","opacity_50","opacity_60","opacity_70","opacity_80","opacity_90","opacity_100"];ue(ae,{tome:se,children:(re,Ne)=>{var Y=Le(),U=I(Y),q=t(U);ee(q,{children:(v,B)=>{h();var n=Z(`These concepts are still developing - some things are incomplete or inconsistent, and there
			will be a lot of breaking changes. I'm thinking of splitting this "light and shadow" section
			into "shadows" and "shading" something.`);s(v,n)}});var W=e(q,2),V=e(t(W));ke(V,{path:"Web/CSS/color-scheme"});var ne=e(V,2);H(ne,{name:"themes",children:(v,B)=>{h();var n=Z("theme");s(v,n)},$$slots:{default:!0}}),h(),a(W);var z=e(W,8),D=e(t(z),17);H(D,{name:"colors"});var de=e(D,2);H(de,{name:"shadows"}),h(),a(z),h(2),a(U);var G=e(U,2);C(G,{children:(v,B)=>{var n=Ce(),p=I(n);A(p,{text:"Shades and highlights"});var w=e(p,2);C(w,{children:($,P)=>{var _=Ie(),g=I(_);A(g,{text:"darken and lighten",tag:"h4",children:(y,b)=>{var o=we();h(2),s(y,o)},$$slots:{default:!0}});var u=e(g,2);ee(u,{});var x=e(u,2);S(x,20,()=>({length:9}),L,(y,b,o)=>{var i=$e();const d=E(()=>"darken_"+(o+1));var l=t(i);let c;var m=e(l,2),F=t(m);N(F,{get name(){return k(d)}}),a(m),a(i),M(()=>c=R(l,"",c,{"background-color":`var(--${k(d)??""})`})),s(y,i)}),a(x);var f=e(x,2);S(f,20,()=>({length:9}),L,(y,b,o)=>{var i=xe();const d=E(()=>"lighten_"+(o+1));var l=t(i);let c;var m=e(l,2),F=t(m);N(F,{get name(){return k(d)}}),a(m),a(i),M(()=>c=R(l,"",c,{"background-color":`var(--${k(d)??""})`})),s(y,i)}),a(f),s($,_)},$$slots:{default:!0}});var T=e(w,2);C(T,{children:($,P)=>{var _=Se(),g=I(_);A(g,{text:"bg and fg",tag:"h4",children:(f,y)=>{var b=Te();h(2),s(f,b)},$$slots:{default:!0}});var u=e(g,4);S(u,20,()=>({length:9}),L,(f,y,b)=>{var o=Pe();const i=E(()=>"bg_"+(b+1));var d=t(o);let l;var c=e(d,2),m=t(c);N(m,{get name(){return k(i)}}),a(c),a(o),M(()=>l=R(d,"",l,{"background-color":`var(--${k(i)??""})`})),s(f,o)}),a(u);var x=e(u,2);S(x,20,()=>({length:9}),L,(f,y,b)=>{var o=Me();const i=E(()=>"fg_"+(b+1));var d=t(o);let l;var c=e(d,2),m=t(c);N(m,{get name(){return k(i)}}),a(c),a(o),M(()=>l=R(d,"",l,{"background-color":`var(--${k(i)??""})`})),s(f,o)}),a(x),s($,_)},$$slots:{default:!0}}),s(v,n)},$$slots:{default:!0}});var j=e(G,2),J=t(j);fe(J,{});var K=e(J,2),Q=t(K),le=e(t(Q));le.__click=oe,h(9),a(Q),a(K),a(j);var X=e(j,2);C(X,{children:(v,B)=>{var n=Ae(),p=I(n);A(p,{text:"Stacking transparency"});var w=e(p,4);ge(w,{content:`<div class="fg_1 p_sm">
	<div class="fg_1 p_sm">
		<div class="fg_1 p_sm">
			<div class="fg_1 p_sm">
				<div class="bg p_sm">
					...
				</div>
			</div>
		</div>
</div>`}),h(4),s(v,n)},$$slots:{default:!0}});var ce=e(X,2);C(ce,{children:(v,B)=>{var n=Ee(),p=I(n);A(p,{text:"Opacity"});var w=e(p,4);S(w,20,()=>ie,T=>T,(T,$)=>{var P=Be(),_=t(P),g=e(_,2),u=t(g);a(g),a(P),M(()=>{_e(_,1,`color bg_a_5 ${$??""}`,"svelte-tyce3u"),pe(u,`.${$??""}`)}),s(T,P)}),a(w),s(v,n)},$$slots:{default:!0}}),s(re,Y)},$$slots:{default:!0}}),he()}ve(["click"]);export{Qe as component};
