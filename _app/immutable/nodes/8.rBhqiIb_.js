import{t as d,a as i,b as H}from"../chunks/DTfCIiy5.js";import{p as O,a as U,f as u,s as e,c as y,n as b,r as p,j as I,t as A}from"../chunks/BnUth-Uv.js";import{s as C}from"../chunks/LY2jiD0Q.js";import{e as P}from"../chunks/D9czmhex.js";import{C as g}from"../chunks/DxqjmPV8.js";import{T as Y}from"../chunks/D4zpgXz5.js";import{g as G}from"../chunks/BrBDLkuh.js";import{T as w,a as k}from"../chunks/BXk2Ux8i.js";import{T as W}from"../chunks/gP3mNA12.js";import{U as j}from"../chunks/CL128Ib0.js";var D=d("Maybe <code>moss.css</code> should default to <code>moss_utilities.css</code> or <code>moss_utility_classes.css</code>? idk",1),J=d(`<!> <p>Moss has three CSS files, two of which are required:</p> <!> <p>The <code>moss.css</code> file is created on demand with the utility classes that your code
			uses, if any. For now it requires <a href="https://github.com/ryanatkn/gro">Gro</a> to build
			it, but it isn't hard to make your own integration. See the example integration in <a href="https://github.com/ryanatkn/moss/blob/main/src/lib/gro_plugin_moss.ts">gro_plugin_moss.ts</a>.</p> <!>`,1),K=d('<li class="overflow_wrap_break_word svelte-c00vz6"> </li>'),Q=d('<h4> </h4> <ul class="unstyled"></ul>',1),V=d(`<!> <p>Moss supports utility classes that cost you nothing until you opt-in. The main stylesheet and
			theme are required and build around CSS custom properties - utility classes offer an
			orthogonal API that some developers prefer some of the time. They leverage Moss's base
			frameworky parts, and are well-integrated with the other APIs and tools.</p> <p>Moss exports <a href="https://github.com/ryanatkn/moss/blob/main/src/lib/css_class_helpers.ts">helpers</a> to generate styles on demand based on class usage in your source files, so you can ship the minimal
			code needed.</p> <aside>The API has been drifting to be more consistently match CSS at the cost of verbosity. I think
			I like this direction but is <code>margin_x_xl</code> absurd? I don't think supporting both versions
			by default is good but the APIs should make this easy to customize.</aside> <aside>⚠️ Moss does not fully support <a href="https://svelte.dev/docs/svelte/class#Attributes-Objects-and-arrays">Svelte's object+array class syntax</a>, added in 5.16. For now see <a href="https://github.com/ryanatkn/moss/blob/main/src/lib/css_class_helpers.test.ts">the tests</a> for the supported forms. The current strategy uses a regexp for TS and Svelte files, but we'll
			probably need to more robustly scan the parsed AST.</aside> <div class="utility_classes svelte-c00vz6"></div>`,1),X=d(`<!> <p>Moss's <a href="https://github.com/ryanatkn/moss/blob/main/src/lib/style.css">main stylesheet</a> provides styles for the base HTML elements using the framework's <!>, acting as a modern CSS reset with sensible defaults and integrated theming. It includes
			Moss-specific CSS classes - not utility classes in the strict sense - that provide common
			generic functionality.</p> <h4><code>.unstyled</code></h4> <!> <ul class="unstyled mb_lg"><li>a</li> <li>b</li></ul> <!> <ul><li>1</li> <li>2</li></ul> <p>The <code>.unstyled</code> class lets Moss provide solid default element styles with a simple and
			generic opt-out:</p> <!> <p>Respecting <code>.unstyled</code> isn't a straightforward choice in all cases. Help is
			appreciated to refine the internals. For example, should <code>input</code> respect it? Maybe?
			All styles or a subset?</p> <aside><p class="row"></p> <!> <p>Moss uses this pattern in some places, and maybe more in the future. One nice aspect is that <code>--list_padding_left</code> need not exist anywhere else but this declaration and maybe
				your code, and in practice it's backwards compatible.</p> <aside>Note the <code>:where()</code> is used for Moss's default styles, so its specificity is as low
				as possible to minimize interference with your styles.</aside></aside>`,1),Z=d("<!> <!> <!> <!>",1);function pe(z,q){O(q,!0);const B=G("classes"),t="inherit|initial|revert|revert_layer|unset",R=[{group:"Position and display",items:[`position_static|relative|absolute|fixed|sticky|${t}`,`display_none|contents|block|flow_root|inline|inline_block|run_in|list_item|inline_list_item|flex|inline_flex|grid|inline_grid|ruby|block_ruby|table|inline_table|${t}`,`visibility_visible|hidden|collapse|${t}`,`float_left|right|none|inline_start|inline_end|${t}`,"opacity_0|10-100","overflow_auto|hidden|scroll|clip|visible","overflow_x|y_auto|hidden|scroll|clip|visible",`overflow_wrap_normal|anywhere|break_word|${t}`,`scrollbar_width_auto|thin|none|${t}`,`scrollbar_gutter_auto|stable|stable_both_edges|${t}`]},{group:"Flexbox and grid",items:["flex_1","flex_wrap|wrap_reverse|nowrap","flex_row|column|row_reverse|column_reverse","grow|shrink","grow|shrink_0","align_items_center|start|end|baseline|stretch","align_content_center|start|end|baseline|space_between|space_around|space_evenly|stretch","align_self_center|start|end|baseline|stretch","justify_content_center|start|end|left|right|space_between|space_around|space_evenly|stretch","justify_items_center|start|end|left|right|baseline|stretch","justify_self_center|start|end|left|right|baseline|stretch"]},{group:"Sizing and spacing",items:["w|h_0|100|1px-3px|auto|max_content|min_content|fit_content|stretch","w|h_xs5-xl15","t|b|l|r_0|100|1px-3px|auto","t|b|l|r_xs5-xl15","inset_0|1px-3px|xs5-xl15","p|pt|pr|pb|pl|px|py_xs5-xl15","p|pt|pr|pb|pl|px|py_0|1px-3px","pt|pr|pb|pl_100","m|mt|mr|mb|ml|mx|my_xs5-xl15","m|mt|mr|mb|ml|mx|my_0|1px-3px|auto","mt|mr|mb|ml_100","gap_xs5-xl15","column|row_gap_xs5-xl15","width_xs-xl","min_width_xs-xl","height_xs-xl","min_height_xs-xl"]},{group:"Typography",items:["font_family_sans|serif|mono","line_height_xs-xl|0|1","font_size_xs-xl9","icon_size_xs-xl3","text_align_start|end|left|right|center|justify|justify_all|match_parent","vertical_align_baseline|sub|super|text_top|text_bottom|middle|top|bottom",`word_break_normal|break_all|keep_all|${t}`,"white_space_normal|nowrap|pre|pre_wrap|pre_line|break_spaces",`white_space_collapse_collapse|preserve|preserve_breaks|preserve_spaces|break_spaces|${t}`,"text_wrap_wrap|nowrap|balance|pretty|stable",`user_select_none|auto|text|all|${t}`,"font_weight_100-900","ellipsis"]},{group:"Colors",items:["text_color_0-10","darken|lighten_1-9","bg|fg","bg|fg_1-9","color_darken|lighten_1-9","color_bg|fg","color_bg|fg_1-9","hue_a-i","color_a-i_1-9","bg_a-i_1-9"]},{group:"Borders and outlines",items:["border_color_1-5","border_color_a-i","border_color_transparent","border_width_0-9","outline_width_0|focused|active",`border_style_none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset|${t}`,"border_radius_0|10|20|30|40|50|60|70|80|90|100","border_radius_xs3-xl","border_top|bottom_left|right_radius_0|10|20|30|40|50|60|70|80|90|100","border_top|bottom_left|right_radius_xs3-xl"]},{group:"Shadows",items:["shadow_xs-xl","shadow_top|bottom_xs-xl","shadow_inset_xs-xl","shadow_inset_top|bottom_xs-xl","shadow_color_highlight|glow|shroud","shadow_color_a-i","shadow_alpha_1-5","shadow_inherit|none"]},{group:"Transforms and visual effects",items:["flip_x|y|xy","pixelated"]},{group:"Composite classes",items:["box","column","row","formatted","selected","selectable","clickable","pane","panel","icon_button","plain","menu_item","chevron","chip"]}];Y(z,{tome:B,children:(E,te)=>{var $=Z(),S=u($);j(S,{children:(l,x)=>{b();var s=H("Both the docs and implementation of these need a lot more work.");i(l,s)}});var T=e(S,2);w(T,{children:(l,x)=>{var s=J(),r=u(s);k(r,{text:"Optional CSS classes"});var o=e(r,4);g(o,{content:`<!-- +layout.svelte -->
<script>
	import '@ryanatkn/moss/style.css'; // required
	import '@ryanatkn/moss/theme.css'; // required, can bring your own
	import '$routes/moss.css'; // optional, generated by \`gro_plugin_moss\`
	// ...
<\/script>`});var n=e(o,4);j(n,{children:(_,c)=>{b();var a=D();b(6),i(_,a)}}),i(l,s)},$$slots:{default:!0}});var M=e(T,2);w(M,{children:(l,x)=>{var s=V(),r=u(s);k(r,{text:"Utility classes"});var o=e(r,10);P(o,21,()=>R,n=>n.group,(n,_)=>{var c=Q(),a=u(c),f=y(a,!0);p(a);var h=e(a,2);P(h,20,()=>I(_).items,m=>m,(m,L)=>{var v=K(),N=y(v);p(v),A(()=>C(N,`.${L??""}`)),i(m,v)}),p(h),A(()=>C(f,I(_).group)),i(n,c)}),p(o),i(l,s)},$$slots:{default:!0}});var F=e(M,2);w(F,{children:(l,x)=>{var s=X(),r=u(s);k(r,{text:"Builtin classes"});var o=e(r,2),n=e(y(o),3);W(n,{name:"variables"}),b(),p(o);var _=e(o,4);g(_,{content:`<ul>
	<li>1</li>
	<li>2</li>
</ul>`});var c=e(_,4);g(c,{content:`<ul class="unstyled">
	<li>a</li>
	<li>b</li>
</ul>`});var a=e(c,6);g(a,{lang:"css",content:`:where(:is(ul, ol, menu):not(.unstyled)) {
	padding-left: var(--space_xl4);
}`});var f=e(a,4),h=y(f);h.textContent="⌆ Note this strategy supports semantic hooks for theming. A hypothetical change:";var m=e(h,2);g(m,{lang:"css",content:`:where(:is(ul, ol, menu):not(.unstyled)) {
	padding-left: var(--list_padding_left, var(--space_xl4));
}`}),b(4),p(f),i(l,s)},$$slots:{default:!0}}),i(E,$)},$$slots:{default:!0}}),U()}export{pe as component};
