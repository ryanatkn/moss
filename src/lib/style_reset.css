/*

A CSS Fuz theme file like `@ryanatkn/fuz/theme.css`
is expected to be imported alongside this one
containing the base variable declarations.
By default that's the `'base'` theme's variables,
which is generated from the default values in `@ryanatkn/fuz/variables.js`.

Some notes:

- uses `:where` on all selectors with more specificity than a single tag/class
	to lower specificity so utility classes override them

*/

*,
*::before,
*::after {
	box-sizing: border-box;
	margin: 0;
	padding: 0;
}

:root {
	font-size: 62.5%; /* see `body.font-size`, using `rem` font size units with a base 16px */
	/* @source https://kilianvalkhof.com/2022/css-html/your-css-reset-needs-text-size-adjust-probably/ */
	-moz-text-size-adjust: none;
	-webkit-text-size-adjust: none;
	text-size-adjust: none;
}

:root,
.themed {
	background-color: var(--bg);
	color: var(--text_color);
	accent-color: var(--color_b_5);
	line-height: var(--line_height_md);
}

:root.dark {
	color-scheme: dark; /* override for the meta tag set by `createThemeSetupHtml` */
}

body {
	min-height: 100vh;
	font-size: 1.6rem; /* matched to `font-size: 62.5%` and same value as the default `--size_md`, but this one shouldn't vary */
	font-family: var(--font_sans);
	tab-size: 2; /* TODO var */
}

::selection {
	background: hsla(var(--hue_a), 90%, 80%, var(--fade_3));
}

/*

Keep hidden behavior when `display` is set.
The `!important` makes this `hidden` behavior much higher specificity.

@source https://github.com/jensimmons/cssremedy

*/
[hidden] {
	display: none !important;
}

/* TODO what about .themed? */
@media (prefers-reduced-motion) {
	:root {
		/* setting to `initial` disables animations but allows for fallbacks (see Pending_Animation)  */
		--duration_6: initial;
		--duration_5: initial;
		--duration_4: initial;
		--duration_3: initial;
		--duration_2: initial;
		--duration_1: initial;
	}
}

a {
	cursor: pointer;
	/* TODO should the generic be --link_color or --color? */
	--color: var(--link_color);
	color: var(--color);
	font-weight: 700;
	text-decoration: var(--text_decoration);
	border-radius: var(--radius_xs2);
	outline: var(--outline_width) var(--outline_style) var(--outline_color);
	/* TODO @multiple outline-offset */
	/* outline-offset: 2px; */
}
/* TODO should these be customizable with utility classes? */
a:hover {
	text-decoration: var(--text_decoration_hover);
}
a:focus {
	--outline_width: var(--outline_width_2);
}
a:active {
	--outline_width: var(--outline_width_3);
}
a.selected {
	--color: var(--link_color_selected);
	--outline_color: var(--border_color);
	text-decoration: var(--text_decoration_selected);
}
a.selected:active {
	--outline_color: var(--border_color);
}

ul,
ol,
menu {
	padding-left: var(--space_xl4);
}
ol {
	list-style: decimal;
}
.unstyled:where(ul, ol, menu) {
	padding-left: 0; /* TODO test specificity with utility classes, maybe change to set --padding_left */
	list-style: none;
}

h1,
h2,
h3,
h4,
h5,
h6 {
	line-height: var(--line_height_sm);
	text-wrap: balance; /* @see https://developer.mozilla.org/en-US/docs/Web/CSS/text-wrap#balance */
	/* TODO use this pattern elsewhere? provides API to components like `Mdn_Logo` */
	font-size: var(--size, var(--size_md));
	font-weight: var(--font_weight);
	overflow-wrap: break-word;
}

h1 {
	--size: var(--size_xl3);
	--font_weight: 300;
	margin-bottom: var(--space_xl5);
	/* TODO strange to omit only this one, but seems to be generally my desired behavior */
	/* margin-top: var(--space_xl7); */
}
h2 {
	--size: var(--size_xl2);
	--font_weight: 400;
	margin-bottom: var(--space_xl4);
	margin-top: var(--space_xl6);
}
h3 {
	--size: var(--size_xl);
	--font_weight: 500;
	margin-bottom: var(--space_xl3);
	margin-top: var(--space_xl5);
}
h4 {
	--size: var(--size_lg);
	--font_weight: 700;
	margin-bottom: var(--space_xl2);
	margin-top: var(--space_xl4);
}
h5 {
	--size: var(--size_md);
	--font_weight: 900;
	margin-bottom: var(--space_xl);
	margin-top: var(--space_xl3);
}
h6 {
	--size: var(--size_sm);
	--font_weight: 600;
	margin-bottom: var(--space_lg);
	margin-top: var(--space_xl2);
	text-transform: uppercase;
}

p {
	overflow-wrap: break-word;
}

/* TODO maybe do the `:not(:last-child)` more generically instead of this selector? */
/* TODO other elements */
/* checkboxes and radios are expected to be nested inside a `label`, thus no bottom margin */
:where(
		p,
		ul,
		ol,
		menu,
		form,
		fieldset,
		table,
		details,
		textarea,
		select,
		label,
		pre,
		blockquote,
		aside,
		nav
	):not(:last-child) {
	margin-bottom: var(--space_lg);
}
:where(section:not(:last-child)) {
	margin-bottom: var(--space_xl7);
}
summary {
	/* TODO maybe change API to like `--margin_bottom`? */
	margin-bottom: var(--space_xs);
}

:where(aside:not(.unstyled)) {
	border-left-color: var(--border_color);
	border-left-style: var(--border_style);
	border-left-width: var(--border_width_3);
	border-radius: var(--radius_xs);
	padding: var(--space_md);
	color: var(--color, var(--text_2));
	background-color: var(--fg_1);
}
:where(aside:not(.unstyled):hover) {
	border-left-color: var(--border_color_4);
}

:where(blockquote:not(.unstyled)) {
	border-radius: var(--radius_xs);
	padding: var(--space_md);
	color: var(--color, var(--text_2));
	background-color: var(--fg_1);
}

code {
	font-family: var(--font_mono);
	font-weight: 600;
	-webkit-hyphens: none;
	hyphens: none;
	color: var(--color, var(--text_2));
	background-color: var(--fg_1);
	padding: 0 var(--space_xs2);
	border-radius: var(--radius_xs);
}

pre {
	/* @see https://developer.mozilla.org/en-US/docs/Web/CSS/white-space#break-spaces */
	/* TODO check for `Code` before adding this - white-space: break-spaces; */
	font-family: var(--font_mono);
	color: var(--color, var(--text_2));
	overflow: auto;
	max-width: 100%;
}

pre > code {
	display: block; /* TODO maybe invert and change to inline in `p`? */
	font-size: var(--size_sm); /* TODO maybe computed from generic `--size` using a multiplier var? */
	font-weight: 500;
}

hr {
	border-top: 1px solid var(--border_color_3);
	border-bottom: 2px solid var(--border_color_3);
	border-left: none;
	border-right: none;
	width: 100%;
	height: 5px;
	margin: var(--space_xl7) 0;
}

fieldset {
	display: flex;
	flex-direction: column;
	border: 0;
}

legend {
	font-size: var(--size_xl);
	margin-bottom: var(--space_lg);
}

input,
textarea,
select {
	-webkit-appearance: none;
	appearance: none;
	font: inherit;
	line-height: normal;
	color: var(--text_color);
	background: var(--input_bg);
	border-color: var(--border_color);
	border-style: var(--border_style);
	border-width: var(--border_width);
	border-radius: var(--border_radius, var(--radius_md));
	outline: var(--outline_width) var(--outline_style) var(--outline_color);
	/* TODO @multiple outline-offset */
	/* outline-offset: 2px; */
	padding: var(--input_padding_y) var(--input_padding_x);
	width: 100%;
	min-width: var(--input_width_min);
	min-height: var(--input_height);
}

textarea {
	--input_padding_y: var(--space_sm);
	height: 100px;
}

select,
option,
input[type='color'] {
	cursor: pointer;
}

option {
	color: var(--text_color);
	background-color: var(--bg);
}

:where(input, textarea, select):hover {
	--border_color: var(--border_color_2);
}

/* these have no active states because they feel buggy in the browsers,
because the active state only applies when the thumb is clicked directly,
but not for the identical user action of clicking the track,
so for consistent visuals we opt to include no active state */
input[type='checkbox'] {
	cursor: pointer;
	width: var(--input_height_sm);
	height: var(--input_height_sm);
	min-width: var(--input_height_sm);
	min-height: var(--input_height_sm);
	--border_radius: var(--radius_xs);
	--input_padding_x: 0;
	--content_default: '✓';
	---content: var(--content_empty, '');
}
input[type='checkbox']:checked {
	/* ✓ ✗ ✘ */
	---content: var(--content, var(--content_default));
}
input[type='checkbox']::before {
	content: var(---content);
	position: relative;
	left: var(--left);
	top: var(--top);
	width: 100%;
	height: 100%;
	text-align: center;
	line-height: normal;
	display: flex;
	align-items: center;
	justify-content: center;
	overflow: var(--overflow, visible);
	font-size: var(--size, var(--size_xl3));
	color: var(--text_color);
}

input[type='radio'] {
	cursor: pointer;
	width: var(--input_height_sm);
	height: var(--input_height_sm);
	min-width: var(--input_height_sm);
	min-height: var(--input_height_sm);
	--input_padding_x: 0;
}
input[type='radio']:checked::before {
	content: '';
	display: block;
	position: relative;
	top: 25%;
	left: 25%;
	width: 50%;
	height: 50%;
	background-color: var(--text_color);
	border-radius: 50%;
}

/* TODO @multiple figure these variables out so they're easily customized (similar pattern in a lot of places) */
input[type='range'] {
	--thumb_size: var(--space_xl);
	--thumb_background_color: var(--text_2);
	cursor: pointer;
}
input[type='range']:hover {
	--thumb_background_color: var(--color_a_5);
}
input[type='range']:disabled {
	--thumb_background_color: var(--text_disabled);
}
input[type='range']:disabled:active {
	--thumb_background_color: var(--color_c_5);
}
input[type='range']::-webkit-slider-thumb {
	-webkit-appearance: none;
	appearance: none;
	height: var(--thumb_size);
	width: var(--thumb_size);
	border-radius: var(--border_radius, var(--radius_md));
	background-color: var(--thumb_background_color);
	border: 0;
	/*

	this is the only line that differs between the `moz` one
	CSS stops parsing if it hits an unknown selector like `::-moz-range-thumb` in Webkit/Blink,
	so we need both declarations anyway, and the declarations can't be combined with plain CSS,
	one of the few times I've wanted to reach for PostCSS

	*/
	margin-top: calc(var(--thumb_size) / -2);
}
input[type='range']::-moz-range-thumb {
	appearance: none;
	height: var(--thumb_size);
	width: var(--thumb_size);
	border-radius: var(--border_radius, var(--radius_md));
	background-color: var(--thumb_background_color);
	border: 0;
}
input[type='range']::-webkit-slider-runnable-track {
	width: 100%;
	height: var(--border_width);
	background-color: var(--thumb_background_color);
}
input[type='range']::-moz-range-track {
	width: 100%;
	height: var(--border_width);
	background-color: var(--thumb_background_color);
}

:where(input, textarea, select).inline,
p :where(input, textarea, select) {
	display: inline-block;
	margin-left: var(--space_lg);
	/* TODO ideally `width` here would be set to a minimum and have an API to increase size --
	buttons can grow automatically, but how can inputs? only with js?
	 */
	width: var(--input_width_min);
}

:where(button, input, textarea, select):focus {
	--border_color: var(--color_a_5);
	--outline_width: var(--outline_width_2);
}
[contenteditable]:focus-visible {
	--outline_width: var(--outline_width_2);
	outline: var(--outline_width) var(--outline_style) var(--outline_color);
	/* TODO @multiple outline-offset */
	/* outline-offset: 2px; */
}

:where(input, textarea, select, [contenteditable]):active {
	--outline_width: var(--outline_width_3);
}

button {
	--text_color: var(--text_2);
	--min_height: var(--input_height);
	cursor: pointer;
	-webkit-appearance: none;
	appearance: none;
	display: flex;
	flex-wrap: wrap;
	align-items: center;
	justify-content: center;
	font: inherit;
	font-weight: 700;
	line-height: normal;
	color: var(--text_color);
	min-height: var(--min_height);
	padding: 0 var(--input_padding_x);
	background: var(--button_bg);
	border-width: var(--border_width);
	border-style: var(--border_style);
	border-color: var(--border_color);
	border-radius: var(--border_radius, var(--radius_md));
	outline: var(--outline_width) var(--outline_style) var(--outline_color);
	/* TODO @multiple outline-offset */
	/* outline-offset: 2px; */
}
button:hover,
button:focus {
	--border_color: var(--border_color_2);
	background: var(--button_bg_hover);
	box-shadow: var(--shadow_inset_md);
}
button:active {
	--border_color: var(--border_color_5);
	--outline_width: var(--outline_width_3);
	/* TODO use of `background` vs `background-color` in this file is not intentional */
	background: var(--button_bg_active);
	box-shadow: var(--shadow_inset_inverse_md);
}
button.inline,
p button {
	display: inline-block;
	--min_height: var(--input_height_sm); /* TODO this increases paragraph line spacing */
}
/*  TODO :has selector? `button:has(input[type='checkbox']:checked)`
see https://caniuse.com/css-has
 */
/* TODO maybe add a style for `button.selected:disabled`, probably reduced brightness,
currently `:disabled` overrides this */
button.selected {
	--text_color: var(--text_active);
	--border_color: var(--color_a_5);
	background: var(--button_bg_active);
}
button.selected:not(.deselectable) {
	cursor: default;
	box-shadow: none;
}
input:checked {
	--text_color: var(--text_active);
	--border_color: var(--color_a_5);
}
input[type='radio']:checked {
	cursor: default;
}
:where(input, textarea, select, button):disabled {
	--text_color: var(--text_disabled);
	--border_color: var(--border_disabled);
	--border_style: solid dashed;
	cursor: default;
	box-shadow: none;
	opacity: var(--disabled_opacity);
	background: var(--button_bg_disabled);
	outline: none;
}
:where(input, textarea, select, button):disabled:active,
label.disabled:active {
	--border_color: var(--color_c_5);
	--text_color: var(--color_c_5);
}

/* TODO these need design work for visuals/consistency/customizability */
button:where(.color_a, .color_b, .color_c, .color_d, .color_e, .color_f, .color_g) {
	color: var(--bg_7);
}
button:where(.color_a, .color_b, .color_c, .color_d, .color_e, .color_f, .color_g):where(
		:hover,
		:focus,
		:active
	) {
	color: var(--bg_10);
}
button.color_a:not(.selected) {
	background-color: var(--color_a_5);
}
button.color_b:not(.selected) {
	background-color: var(--color_b_5);
}
button.color_c:not(.selected) {
	background-color: var(--color_c_5);
}
button.color_d:not(.selected) {
	background-color: var(--color_d_5);
}
button.color_e:not(.selected) {
	background-color: var(--color_e_5);
}
button.color_f:not(.selected) {
	background-color: var(--color_f_5);
}
button.color_g:not(.selected) {
	background-color: var(--color_g_5);
}
button.selected.color_a {
	color: var(--color_a_5);
	border-color: var(--color_a_5);
}
button.selected.color_b {
	color: var(--color_b_5);
	border-color: var(--color_b_5);
}
button.selected.color_d {
	color: var(--color_d_5);
	border-color: var(--color_d_5);
}
button.selected.color_e {
	color: var(--color_e_5);
	border-color: var(--color_e_5);
}
button.selected.color_c {
	color: var(--color_c_5);
	border-color: var(--color_c_5);
}
button.selected.color_f {
	color: var(--color_f_5);
	border-color: var(--color_f_5);
}
button.selected.color_g {
	color: var(--color_g_5);
	border-color: var(--color_g_5);
}

/* TODO could improve this with the coming `:has` selector
for disabled colors without needing a wrapper .disabled class */
label {
	color: var(--text_color);
	cursor: pointer;
}
:where(label .title) {
	font-weight: 600;
	margin-bottom: var(--space_xs2);
}
label.selected {
	cursor: default;
	--text_color: var(--text_active);
}
label.disabled {
	cursor: default;
	--text_color: var(--text_disabled);
}
label.row {
	justify-content: flex-start;
	align-items: center;
}
label.row :where(input[type='checkbox'], input[type='radio']) {
	margin-right: var(--space_md);
}

small {
	font-size: var(--size_sm);
}

img,
picture,
canvas,
svg,
video {
	display: block;
	max-width: 100%; /* shrink to fit */
	height: auto; /* preserve aspect ratio */
}

audio {
	width: 100%;
}

summary {
	cursor: pointer;
	padding: var(--space_md);
	border-radius: var(--radius_xs);
}
summary:hover {
	background-color: var(--fg_1);
}
summary:active {
	background-color: var(--fg_2);
}

/* TODO more  table styles */
thead {
	text-align: left;
}
